-- ONLY WORK WITH SUPABASE AND SUPABASE AUTH
-- This schema is designed to work with Supabase and its built-in authentication system.

-- --- User Authentication & Profile ---
-- Links to the master user record in Supabase Auth (or similar)
DROP TABLE IF exists users cascade;
CREATE TABLE users (
    id UUID PRIMARY KEY NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    email TEXT, -- Optional cache from auth.users
    name TEXT,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP
);

create or replace function handle_new_user()
returns trigger as $$
begin
  insert into public.users
  values(new.id, new.email, new.raw_user_meta_data->>'name', new.created_at);

  insert into public.workspaces(owner_user_id)
  values(new.id);
  
  return new;
end;
$$ language plpgsql security definer;

create or replace trigger on_new_user
after insert on auth.users for each row
execute procedure public.handle_new_user();

-- --- Workspaces ---
-- Represents a container for tracked LeetCode problems.
-- A user might have one or more workspaces (though MVP might focus on one initially).
DROP TABLE IF exists workspaces cascade;
CREATE TABLE workspaces (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(), -- Use built-in UUID generation
    owner_user_id UUID NOT NULL, -- The user who created/owns the workspace
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP, -- Needs trigger for auto-update

    -- Relationship to the owner
    -- Use RESTRICT initially: prevent deleting a user if they still own workspaces.
    CONSTRAINT fk_workspaces_owner FOREIGN KEY (owner_user_id) REFERENCES users(id) ON DELETE RESTRICT
);

-- Index for fetching workspaces owned by a user
CREATE INDEX idx_workspaces_owner_user_id ON workspaces(owner_user_id);


-- --- Canonical LeetCode Problem Data ---
-- (No changes needed here)
DROP TABLE IF exists leet_code_problems cascade;
CREATE TABLE leet_code_problems (
    id TEXT PRIMARY KEY, -- Assuming CUID generated by application
    frontend_question_id TEXT NOT NULL UNIQUE,
    title TEXT NOT NULL,
    title_slug TEXT NOT NULL UNIQUE,
    difficulty VARCHAR(10) NOT NULL,
    paid_only BOOLEAN NOT NULL,
    topic_tags JSONB,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP
);
CREATE INDEX idx_leet_code_problems_frontend_question_id ON leet_code_problems(frontend_question_id);
CREATE INDEX idx_leet_code_problems_title_slug ON leet_code_problems(title_slug);


-- --- Tracking a Specific LeetCode Problem within a Workspace ---
DROP TABLE IF exists tracked_problems cascade;
CREATE TABLE tracked_problems (
    id bigint primary key generated always as identity, -- Assuming CUID generated by application
    -- **** CHANGED **** Removed user_id, added workspace_id
    workspace_id UUID NOT NULL,
    problem_id TEXT NOT NULL,

    -- SM-2 State (unchanged)
    ease_factor DOUBLE PRECISION NOT NULL DEFAULT 2.5,
    interval_days INTEGER NOT NULL DEFAULT 0,
    repetitions_count INTEGER NOT NULL DEFAULT 0,
    next_review_date TIMESTAMP WITH TIME ZONE NOT NULL,
    last_reviewed_at TIMESTAMP WITH TIME ZONE,

    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,

    -- **** UPDATED **** Foreign key constraint references workspaces table
    CONSTRAINT fk_tracked_problems_workspace FOREIGN KEY (workspace_id) REFERENCES workspaces(id) ON DELETE CASCADE, -- If workspace deleted, delete its tracked problems
    CONSTRAINT fk_tracked_problems_problem FOREIGN KEY (problem_id) REFERENCES leet_code_problems(id) ON DELETE RESTRICT,

    -- **** UPDATED **** Ensure a problem is tracked only once PER WORKSPACE
    CONSTRAINT uq_tracked_problems_workspace_problem UNIQUE (workspace_id, problem_id)
);

-- **** UPDATED **** Indices reflecting the change
CREATE INDEX idx_tracked_problems_workspace_id ON tracked_problems(workspace_id);
CREATE INDEX idx_tracked_problems_problem_id ON tracked_problems(problem_id);
CREATE INDEX idx_tracked_problems_next_review_date ON tracked_problems(next_review_date); -- Still needed for review dashboard query


-- --- Record of a Single Review Event ---
-- (No direct change needed, still links to tracked_problems)
DROP TABLE IF exists reviews cascade;
CREATE TABLE reviews (
    id bigint primary key generated always as identity, -- Assuming CUID generated by application
    tracked_problem_id bigint NOT NULL,
    quality_rating INTEGER NOT NULL,
    reviewed_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_reviews_tracked_problem FOREIGN KEY (tracked_problem_id) REFERENCES tracked_problems(id) ON DELETE CASCADE
);
CREATE INDEX idx_reviews_tracked_problem_id ON reviews(tracked_problem_id);


-- --- Workspace Sharing Permissions ---
-- **** RENAMED and RESTRUCTURED **** (Replaces list_shares)
DROP TABLE IF exists workspace_shares cascade;
CREATE TYPE user_role AS ENUM ('viewer', 'editor', 'reviewer');
CREATE TABLE workspace_shares (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(), -- Use built-in UUID generation
    -- The workspace being shared
    workspace_id UUID NOT NULL,
    -- The user being granted access
    shared_user_id UUID NOT NULL,

    role user_role NOT NULL,
    -- Optional: Add permission level later (e.g., 'read', 'write') if needed

    granted_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP,

    -- Relationships
    CONSTRAINT fk_workspace_shares_workspace FOREIGN KEY (workspace_id) REFERENCES workspaces(id) ON DELETE CASCADE, -- If workspace deleted, remove shares for it
    CONSTRAINT fk_workspace_shares_viewer FOREIGN KEY (shared_user_id) REFERENCES users(id) ON DELETE CASCADE, -- If viewer user deleted, remove shares granted TO them

    -- Ensure a user has only one share entry per workspace
    CONSTRAINT uq_workspace_shares_workspace_viewer UNIQUE (workspace_id, shared_user_id)
);

-- Indices for looking up shares by workspace or viewer
CREATE INDEX idx_workspace_shares_workspace_id ON workspace_shares(workspace_id);
CREATE INDEX idx_workspace_shares_shared_user_id ON workspace_shares(shared_user_id);